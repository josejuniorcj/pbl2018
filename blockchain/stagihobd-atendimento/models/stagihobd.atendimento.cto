/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace stagihobd.atendimento

/** 
 * ETAPA: ANTES 
 * Fluxo:
 *  1. Cadastrar HospitalParticipant
 *  2. Cadastrar AutorizacaoAsset, ligado ao HospitalParticipant
 *  3. Realizar a transação AutorizarTransaction
 *  4. Retornar o IdTransaction (Hash do BlockChain)
 */
participant HospitalParticipant identified by hospitalID {
  o String hospitalID
  o String nome
  o String cnpj
  o String endereco
  o String numero
  o String complemento optional
  o String cep
  o String bairro
  o String municipio
  o String uf
}

asset AutorizacaoAsset identified by autorizacaoID {
  o String autorizacaoID
  --> HospitalParticipant dono
  o String status
}

transaction AutorizarTransaction {
  --> AutorizacaoAsset asset
  o String pacienteID
  o String status
}

event AutorizarEvent {
  --> AutorizacaoAsset asset
  o String pacienteID optional
  o String status optional
  o String hospitalID optional         /* buscar no Asset, antes de invocar o evento */
  o String statusAntigo optional      /* buscar objeto, antes de atualizar */
}

/** 
 * ETAPA: DURANTE
 * Fluxo:
 *  1. Cadastrar MedicoParticipant ou MedicoEspecialistaParticipant
 *  2. Cadastrar AtendimentoAsset, ligado ao MedicoParticipant
 *  3. Obter o pacienteID (Hash)
 *  4. Realizar a transação AtenderTransaction
 *  5. Retornar o IdTransaction (Hash do BlockChain)
 */
participant MedicoParticipant identified by crm {
  o String crm
  o String nome
}

participant MedicoEspecialistaParticipant extends MedicoParticipant{
  o String especialidade
}

asset AtendimentoAsset identified by atendimentoID {
  o String atendimentoID
  --> MedicoParticipant dono
  o String status
}

transaction AtenderTransaction {
  --> AtendimentoAsset asset
  o String autorizacaoID
  o String pacienteID
  o String status
}

event AtenderEvent {
  --> AtendimentoAsset asset
  o String autorizacaoID optional
  o String pacienteID optional
  o String status optional
  o String atendimentoID  optional     /* buscar no Asset, antes de invocar o evento */
  o String crm  optional               /* buscar no Asset, antes de invocar o evento */
  o String statusAntigo  optional      /* buscar objeto, antes de atualizar */
}

/** 
 * ETAPA: APÓS
 * Fluxo:
 *  1. Cadastrar MedicoParticipant ou MedicoEspecialistaParticipant
 *  2. Cadastrar ProntuarioAsset, ligado ao MedicoParticipant
 *  3. Obter o pacienteID (Hash)
 *  4. Realizar a transação RegistrarProntuarioTransaction
 *  5. Retornar o IdTransaction (Hash do BlockChain)
 */
asset ProntuarioAsset identified by prontuarioID {
  o String prontuarioID
  --> MedicoParticipant dono
  o String status
}

transaction RegistrarProntuarioTransaction {
  --> ProntuarioAsset asset
  o String prontuarioID
  o String atendimentoID
  o String autorizacaoID
  o String pacienteID
  o String status
  o String registroClinico
  o String dadosColetados
  o String avaliacao
  o String plano
  o DateTime dataAtendimento
}

event RegistrarProntuarioEvent{
  --> ProntuarioAsset asset
  o String prontuarioID optional
  o String atendimentoID optional
  o String autorizacaoID optional
  o String pacienteID optional
  o String status optional
  o String crm optional                /* buscar no Asset, antes de invocar o evento */
  o String statusAntigo  optional        /* buscar objeto, antes de atualizar */
}